#include <stdlib.h>
#include <stdio.h>
#include <math.h>

void main()
{
   
   int i,j,q,numhost,count,minth,maxth,time,simtime,m,qtime,totalpack;
      double wq,avg,maxp,pa,pb;  
    
    simtime=2;
    wq=0.002;
    minth=5;
    maxth=15;
    maxp=0.02;
    clrscr();
    
   /* core RED algorithm */
          avg=0;
          count=-1;
          qtime=0;
	printf("enter the total no of packets generated by network:");
	scanf("%d",&totalpack);
          

	     printf("core RED Algorithm \n");
	
      for(time=0;time<simtime; time++) 
        {
               
	     printf("core RED Algorithm time =%d \r",time); 
             printf("packets dropped in time %d \n",time);
              q=0;
             for(i=0;i<totalpack;i++) 
              {
               if(q != 0) {
                     avg=(1-wq)*avg+wq*q;
			//printf("average queue size %f\n", avg);
                  }
                else {
                         m=time-qtime;
                         avg=pow((1-wq),m)*avg;
                     //printf("average queue size %f\n", avg);
                             
                      }
                          
                          if(minth <= avg && avg < maxth ) 
			{
                             count++; 
                             pb=maxp*(avg-minth)/(maxth-minth);
                             pa=pb/(1-count*pb);

                     // printf("drop probabulity of packet %d is %f",i,pa);
                              if(pa >= 0.4) 
                               { 
                                printf("%d\n", i);
                               count=0;
                              }
                            else 
                              q++;

                           }
                           else if(maxth <= avg) 
                             {
                              printf("%d\n", i);
                               count=0;
                             } 
                          else
                           {
                               count=-1;
                                q++;

                           } 
                           if(q==0) 
			   {
                              qtime=time;
                           }
             }
       }
       getch();
   }
/*output:
enter the total no of packets generated by network:100
core RED Algorithm                                                              
packets dropped in time 0                                                       
packets dropped in time 1                                                       
53                                                                              
88                                                                              
89                                                                              
90                                                                              
91                                                                              
92                                                                              
93                                                                              
94                                                                              
95                                                                              
96                                                                              
97                                                                              
98                                                                              
99  */
